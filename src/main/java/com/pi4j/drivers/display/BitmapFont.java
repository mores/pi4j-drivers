package com.pi4j.drivers.display;

import java.util.HashMap;
import java.util.Map;

/**
 * A simple bitmap font implementation, currently limited to 64 bit character cells, including a default
 * HD44780-compatible 5x8 font.
 */
public class BitmapFont {

    /** Rendering options */
    public enum Option {
        /** If set, empty pixel columns at the start and end of a character cell are skipped. */
        PROPORTIONAL,
    }

    private static BitmapFont font5x8 = null;
    private static BitmapFont font5x8proportional = null;

    private static BitmapFont font5x10 = null;
    private static BitmapFont font5x10proportional = null;

    // To expand supported bitmap sizes and reduce memory, perhaps change this to an interleaved int array with binary
    // search for character lookup.
    private final Map<Integer, Glyph> codepoints = new HashMap<>();

    public void addCharacter(int codepoint, long bitmap) {
        addCharacter(codepoint, cellWidth, bitmap);
    }

    public void addCharacter(int codepoint, int width, long bitmap) {
        codepoints.put(codepoint, new Glyph(width, bitmap));
    }

    /** Adds bitmaps for a set of subsequent codepoints. */
    public void addCharacters(int codePoint, long... bitmaps) {
        for (long bitmap : bitmaps) {
            addCharacter(codePoint++, bitmap);
        }
    }

    /** The character cell width. */
    private final int cellWidth;
    /** The character cell height. */
    private final int cellHeight;

    /** Bitmask used for checking if a column is empty */
    private final long columnMask;

    /**
     * Constructs an empty BitmapFont with the given character cell size.
     * The total size is limited to 64 bit.
     */
    public BitmapFont(int cellWidth, int cellHeight) {
        if (cellWidth <= 0 || cellHeight <= 0) {
            throw new IllegalArgumentException("cellWidth & height must be > 0");
        }
        if (cellWidth * cellHeight > 64) {
            throw new IllegalArgumentException("bitWidth * cellHeight must be <= 64");
        }
        this.cellWidth = cellWidth;
        this.cellHeight = cellHeight;
        long columnMask = 0;
        long shift = 0;
        for (int i = 0; i < cellHeight; i++) {
            columnMask |= 1L << shift;
            shift += cellWidth;
        }
        this.columnMask = columnMask;
    }

    /**
     *  Returns a basic 5x8 (6x8 including spacing) bitmap font compatible with HD44780 displays, so the custom
     *  character capability of this display can be used with data from this font to render ISO-8859-1 characters
     *  beyond the basic ascii range.
     */
    public static BitmapFont get5x8Font(Option... options) {
        synchronized (BitmapFont.class) {
            if (font5x8 == null) {
                font5x8 = new BitmapFont(6, 8);
                font5x8.addLcdCharacters();
            }

            if (options.length > 0 && options[0] == Option.PROPORTIONAL) {
                if (font5x8proportional == null) {
                    font5x8proportional = font5x8.toProportional();
                }
                return font5x8proportional;
            }

            return font5x8;
        }
    }

    public static BitmapFont get5x10Font(Option... options) {
        synchronized (BitmapFont.class) {
            if (font5x10 == null) {
                font5x10 = new BitmapFont(6, 10);
                font5x10.addCharacter(
                        'g', 0b000000_000000_000000_001111_010001_010001_010001_001111_000001_001110L);
                font5x10.addCharacter(
                        'j', 0b000000_000010_000000_000110_000010_000010_000010_000010_010010_001100L);
                font5x10.addCharacter(
                        'p', 0b000000_000000_000000_010110_011001_010001_010001_011110_010000_010000L);
                font5x10.addCharacter(
                        'q', 0b000000_000000_000000_001101_010011_010001_010001_001111_000001_000001L);
                font5x10.addCharacter(
                        'y', 0b000000_000000_000000_010001_010001_010001_010001_001111_000001_001110L);
                font5x10.addCharacter(
                        'µ', 0b000000_000000_000000_010001_010001_010001_010011_011101_010000_010000L);
                font5x10.addCharacter(
                        'ý', 0b000010_000100_000000_010001_010001_010001_010001_001111_000001_001110L);
                font5x10.addCharacter(
                        'þ', 0b000000_001100_000100_000110_000101_000101_000101_000110_000100_001110L);
                font5x10.addCharacter(
                        'ÿ', 0b000000_001010_000000_010001_010001_010001_010001_001111_000001_001110L);
                for (Map.Entry<Integer, Glyph> entry : get5x8Font().codepoints.entrySet()) {
                    int codepoint = entry.getKey();
                    if (!font5x10.codepoints.containsKey(codepoint)) {
                        font5x10.addCharacter(codepoint, entry.getValue().bitmap << 12);
                    }
                }
            }
            if (options.length > 0 && options[0] == Option.PROPORTIONAL) {
                if (font5x10proportional == null) {
                    font5x10proportional = font5x10.toProportional();
                }
                return font5x10proportional;
            }

            return font5x10;
        }
    }

    /** Returns the width of a character cell in pixels. */
    public int getCellHeight() {
        return cellHeight;
    }

    /** Returns the height of a character cell in pixels. */
    public int getCellWidth() {
        return cellWidth;
    }

    public Glyph getGlyph(int codepoint) {
        return codepoints.get(codepoint);
    }

    public BitmapFont toProportional() {
        BitmapFont result = new BitmapFont(cellWidth, cellHeight);
        for (Map.Entry<Integer, Glyph> entry : codepoints.entrySet()) {
            result.codepoints.put(entry.getKey(), entry.getValue().toProportional());
        }
        return result;
    }

    // Private methods.

    private void addLcdCharacters() {
            addCharacters(0x020, 0,  //
                    0b000000_000100_000100_000100_000100_000000_000000_000100L, // !
                    0b000000_001010_001010_001010_000000_000000_000000_000000L, // "
                    0b000000_001010_001010_011111_001010_011111_001010_001010L, // #
                    0b000000_000100_001111_010100_001110_000101_011110_000100L, // $
                    0b000000_011000_011001_000010_000100_001000_010011_000011L, // %
                    0b000000_001100_010010_010100_001000_010101_010010_001101L, // &
                    0b000000_001100_000100_001000_000000_000000_000000_000000L, // '
                    0b000000_000010_000100_001000_001000_001000_000100_000010L, // (
                    0b000000_001000_000100_000010_000010_000010_000100_001000L, // )
                    0b000000_000000_000100_010101_001110_010101_000100_000000L, // *
                    0b000000_000000_000100_000100_011111_000100_000100_000000L, // +
                    0b000000_000000_000000_000000_000000_001100_000100_001000L, // ,
                    0b000000_000000_000000_000000_011111_000000_000000_000000L, // -
                    0b000000_000000_000000_000000_000000_000000_001100_001100L, // .
                    0b000000_000000_000001_000010_000100_001000_010000_000000L, // /
                    0b000000_001110_010001_010011_010101_011001_010001_001110L, // 0
                    0b000000_000100_001100_000100_000100_000100_000100_011111L, // 1
                    0b000000_001110_010001_000001_000010_000100_001000_011111L, // 2
                    0b000000_011111_000010_000100_000010_000001_010001_001110L, // 3
                    0b000000_000010_000110_001010_010010_011111_000010_000010L, // 4
                    0b000000_011111_010000_011110_000001_000001_010001_001110L, // 5
                    0b000000_000110_001000_010000_011110_010001_010001_001110L, // 6
                    0b000000_011111_000001_000010_000100_001000_001000_001000L, // 7
                    0b000000_001110_010001_010001_001110_010001_010001_001110L, // 8
                    0b000000_001110_010001_010001_001111_000001_000010_001100L, // 9
                    0b000000_000000_001100_001100_000000_001100_001100_000000L, // :
                    0b000000_000000_001100_001100_000000_001100_000100_001000L, // ;
                    0b000000_000010_000100_001000_010000_001000_000100_000010L, // <
                    0b000000_000000_000000_011111_000000_011111_000000_000000L, // =
                    0b000000_001000_000100_000010_000001_000010_000100_001000L, // >
                    0b000000_001110_010001_000001_000010_000100_000000_000100L, // ?
                    0b000000_001110_010001_000001_001101_010101_010101_001110L, // @
                    0b000000_000100_001010_010001_010001_011111_010001_010001L, // A
                    0b000000_011110_010001_010001_011110_010001_010001_011110L, // B
                    0b000000_001110_010001_010000_010000_010000_010001_001110L, // C
                    0b000000_011100_010010_010001_010001_010001_010010_011100L, // D
                    0b000000_011111_010000_010000_011110_010000_010000_011111L, // E
                    0b000000_011111_010000_010000_011110_010000_010000_010000L, // F
                    0b000000_001110_010001_010000_010111_010001_010001_001111L, // G
                    0b000000_010001_010001_010001_011111_010001_010001_010001L, // H
                    0b000000_001110_000100_000100_000100_000100_000100_001110L, // I
                    0b000000_001110_000010_000010_000010_000010_010010_001100L, // J
                    0b000000_010001_010010_010100_011000_010100_010010_010001L, // K
                    0b000000_010000_010000_010000_010000_010000_010000_011111L, // L
                    0b000000_010001_011011_010101_010101_010001_010001_010001L, // M
                    0b000000_010001_010001_011001_010101_010011_010001_010001L, // N
                    0b000000_001110_010001_010001_010001_010001_010001_001110L, // O
                    0b000000_011110_010001_010001_011110_010000_010000_010000L, // P
                    0b000000_001110_010001_010001_010001_010101_010010_001101L, // Q
                    0b000000_011110_010001_010001_011110_010100_010010_010001L, // R
                    0b000000_001111_010000_010000_001110_000001_000001_011110L, // S
                    0b000000_011111_000100_000100_000100_000100_000100_000100L, // T
                    0b000000_010001_010001_010001_010001_010001_010001_001110L, // U
                    0b000000_010001_010001_010001_010001_010001_001010_000100L, // V
                    0b000000_010001_010001_010001_010101_010101_010101_001010L, // W
                    0b000000_010001_010001_001010_000100_001010_010001_010001L, // X
                    0b000000_010001_010001_010001_001010_000100_000100_000100L, // Y
                    0b000000_011111_000001_000010_000100_001000_010000_011111L, // Z
                    0b000000_001110_001000_001000_001000_001000_001000_001110L, // [
                    0b000000_000000_010000_001000_000100_000010_000001_000000L, // \
                    0b000000_001110_000010_000010_000010_000010_000010_001110L, // ]
                    0b000000_000100_001010_010001_000000_000000_000000_000000L, // ^
                    0b000000_000000_000000_000000_000000_000000_000000_011111L, // _
                    0b000000_001000_000100_000010_000000_000000_000000_000000L, // `
                    0b000000_000000_000000_001110_000001_001111_010001_001111L, // a
                    0b000000_010000_010000_010110_011001_010001_010001_011110L, // b
                    0b000000_000000_000000_001110_010000_010000_010001_001110L, // c
                    0b000000_000001_000001_001101_010011_010001_010001_001111L, // d
                    0b000000_000000_000000_001110_010001_011111_010000_001110L, // e
                    0b000000_000110_001001_001000_011100_001000_001000_001000L, // f
                    0b000000_000000_001111_010001_010001_001111_000001_001110L, // g
                    0b000000_010000_010000_010110_011001_010001_010001_010001L, // h
                    0b000000_000100_000000_000100_001100_000100_000100_001110L, // i
                    0b000000_000010_000000_000110_000010_000010_010010_001100L, // j
                    0b000000_010000_010000_010010_010100_011000_010100_010010L, // k
                    0b000000_001100_000100_000100_000100_000100_000100_000110L, // l
                    0b000000_000000_000000_011010_010101_010101_010001_010001L, // m
                    0b000000_000000_000000_010110_011001_010001_010001_010001L, // n
                    0b000000_000000_000000_001110_010001_010001_010001_001110L, // o
                    0b000000_000000_000000_011110_010001_011110_010000_010000L, // p
                    0b000000_000000_000000_001101_010011_001111_000001_000001L, // q
                    0b000000_000000_000000_010110_011001_010000_010000_010000L, // r
                    0b000000_000000_000000_001110_010000_001110_000001_011110L, // s
                    0b000000_001000_001000_011100_001000_001000_001001_000110L, // t
                    0b000000_000000_000000_010001_010001_010001_010011_001101L, // u
                    0b000000_000000_000000_010001_010001_010001_001010_000100L, // v
                    0b000000_000000_000000_010001_010001_010101_010101_001010L, // w
                    0b000000_000000_000000_010001_001010_000100_001010_010001L, // x
                    0b000000_000000_000000_010001_010001_001111_000001_001110L, // y
                    0b000000_000000_000000_011111_000010_000100_001000_011111L, // z
                    0b000000_000010_000100_000100_001000_000100_000100_000010L, // {
                    0b000000_000100_000100_000100_000100_000100_000100_000100L, // |
                    0b000000_001000_000100_000100_000010_000100_000100_001000L, // }
                    0b000000_000000_000000_000000_001101_010010_000000_000000L); // ~

            addCharacters(0x0a0, 0,  // NBSP
                    0b000000_000100_000000_000000_000100_000100_000100_000100L, // ¡
                    0b000000_000100_001110_010100_010100_010101_001110_000100L, // ¢
                    0b000000_000110_001000_001000_011100_001000_001001_010110L, // £
                    0b000000_000000_010001_001110_001010_001110_010001_000000L, // ¤
                    0b000000_010001_001010_011111_000100_011111_000100_000100L, // ¥
                    0b000000_000100_000100_000100_000000_000100_000100_000100L, // ¦
                    0b000000_000110_001001_000100_001010_000100_010010_001100L, // §
                    0b000000_000010_000101_000100_011111_000100_010100_001000L, // ¨
                    0b000000_011111_010001_010101_010111_010101_010001_011111L, // ©
                    0b000000_001110_000001_001111_010001_001111_000000_011111L, // ª
                    0b000000_000000_000101_001010_010100_001010_000101_000000L, // «
                    0b000000_010010_010101_010101_011101_010101_010101_010010L, // ¬
                    0b000000_001111_010001_010001_001111_000101_001001_010001L, // SHY
                    0b000000_011111_010001_010101_010001_010011_010101_011111L, // ®
                    0b000000_000100_001000_001100_000000_000000_000000_000000L, // ¯
                    0b001100_010010_010010_010010_001100_000000_000000_000000L, // °
                    0b000000_000100_000100_011111_000100_000100_000000_011111L, // ±
                    0b001100_010010_000100_001000_011110_000000_000000_000000L, // ²
                    0b011100_000010_001100_000010_011100_000000_000000_000000L, // ³
                    0b011100_010010_011100_010000_010010_010111_010010_000011L, // ´
                    0b000000_010001_010001_010001_010011_011101_010000_010000L, // µ
                    0b000000_001111_010011_010011_001111_000011_000011_000011L, // ¶
                    0b000000_000000_000000_000000_001100_001100_000000_000000L, // ·
                    0b000000_000000_000000_001010_010001_010101_010101_001010L, // ¸
                    0b001000_011000_001000_001000_011100_000000_000000_000000L, // ¹
                    0b000000_001110_010001_010001_010001_001110_000000_011111L, // º
                    0b000000_000000_010100_001010_000101_001010_010100_000000L, // »
                    0b010001_010010_010100_001010_010110_001010_001111_000010L, // ¼
                    0b010001_010010_010100_001010_010101_000001_000010_000111L, // ½
                    0b011000_001000_011000_001001_011011_000101_000111_000001L, // ¾
                    0b000000_000100_000000_000100_001000_010000_010001_001110L, // ¿
                    0b001000_000100_000100_001010_010001_011111_010001_010001L, // À
                    0b000010_000100_000100_001010_010001_011111_010001_010001L, // Á
                    0b000100_001010_000000_001110_010001_011111_010001_010001L, // Â
                    0b001101_010010_000000_001110_010001_011111_010001_010001L, // Ã
                    0b001010_000000_000100_001010_010001_011111_010001_010001L, // Ä
                    0b000100_001010_000100_001010_010001_011111_010001_010001L, // Å
                    0b000000_000111_001100_010100_010111_011100_010100_010111L, // Æ
                    0b001110_010001_010000_010000_010001_001110_000010_000110L, // Ç
                    0b001000_000100_000000_011111_010000_011110_010000_011111L, // È
                    0b000010_000100_000000_011111_010000_011110_010000_011111L, // É
                    0b000100_001010_000000_011111_010000_011110_010000_011111L, // Ê
                    0b000000_001010_000000_011111_010000_011110_010000_011111L, // Ë
                    0b001000_000100_000000_001110_000100_000100_000100_001110L, // Ì
                    0b000010_000100_000000_001110_000100_000100_000100_001110L, // Í
                    0b000100_001010_000000_001110_000100_000100_000100_001110L, // Î
                    0b000000_001010_000000_001110_000100_000100_000100_001110L, // Ï
                    0b000000_001110_001001_001001_011101_001001_001001_001110L, // Ð
                    0b001101_010010_000000_010001_011001_010101_010011_010001L, // Ñ
                    0b001000_000100_001110_010001_010001_010001_010001_001110L, // Ò
                    0b000010_000100_001110_010001_010001_010001_010001_001110L, // Ó
                    0b000100_001010_000000_001110_010001_010001_010001_001110L, // Ô
                    0b001101_010010_000000_001110_010001_010001_010001_001110L, // Õ
                    0b001010_000000_001110_010001_010001_010001_010001_001110L, // Ö
                    0b000000_000000_010001_001010_000100_001010_010001_000000L, // ×
                    0b000000_001110_000100_001110_010101_001110_000100_001110L, // Ø
                    0b001000_000100_010001_010001_010001_010001_010001_001110L, // Ù
                    0b000010_000100_010001_010001_010001_010001_010001_001110L, // Ú
                    0b000100_001010_000000_010001_010001_010001_010001_001110L, // Û
                    0b001010_000000_010001_010001_010001_010001_010001_001110L, // Ü
                    0b000010_000100_010001_001010_000100_000100_000100_000100L, // Ý
                    0b011000_001000_001110_001001_001001_001110_001000_011100L, // Þ
                    0b000000_000110_001001_001001_001110_001001_001001_010110L, // ß
                    0b001000_000100_000000_001110_000001_001111_010001_001111L, // à
                    0b000010_000100_000000_001110_000001_001111_010001_001111L, // á
                    0b000100_001010_000000_001110_000001_001111_010001_001111L, // â
                    0b001101_010010_000000_001110_000001_001111_010001_001111L, // ã
                    0b000000_001010_000000_001110_000001_001111_010001_001111L, // ä
                    0b000100_001010_000100_001110_000001_001111_010001_001111L, // å
                    0b000000_000000_011010_000101_001111_010100_010101_001010L, // æ
                    0b000000_000000_001110_010000_010001_001110_000100_001100L, // ç
                    0b001000_000100_000000_001110_010001_011111_010000_001110L, // è
                    0b000010_000100_000000_001110_010001_011111_010000_001110L, // é
                    0b000100_001010_000000_001110_010001_011111_010000_001110L, // ê
                    0b000000_001010_000000_001110_010001_011111_010000_001110L, // ë
                    0b001000_000100_000000_000100_001100_000100_000100_001110L, // ì
                    0b000010_000100_000000_000100_001100_000100_000100_001110L, // í
                    0b000100_001010_000000_000100_001100_000100_000100_001110L, // î
                    0b000000_001010_000000_000100_001100_000100_000100_001110L, // ï
                    0b000000_010100_001000_010100_000010_001111_010001_001110L, // ð
                    0b001101_010010_000000_010110_011001_010001_010001_010001L, // ñ
                    0b001000_000100_000000_001110_010001_010001_010001_001110L, // ò
                    0b000010_000100_000000_001110_010001_010001_010001_001110L, // ó
                    0b000000_000100_001010_000000_001110_010001_010001_001110L, // ô
                    0b000000_001101_010010_000000_001110_010001_010001_001110L, // õ
                    0b000000_001010_000000_001110_010001_010001_010001_001110L, // ö
                    0b000000_000000_000100_000000_011111_000000_000100_000000L, // ÷
                    0b000000_000010_000100_001110_010101_001110_000100_001000L, // ø
                    0b001000_000100_000000_010001_010001_010001_010011_001101L, // ù
                    0b000010_000100_000000_010001_010001_010001_010011_001101L, // ú
                    0b000100_001010_000000_010001_010001_010001_010011_001101L, // û
                    0b000000_001010_000000_010001_010001_010001_010011_001101L, // ü
                    0b000010_000100_000000_010001_010001_001111_000001_001110L, // ý
                    0b000000_001100_000100_000110_000101_000110_000100_001110L, // þ
                    0b000000_001010_000000_010001_010001_001111_000001_001110L); // ÿ

            addCharacter(0x20AC,
                    0b000000_011111_010001_010000_011110_010001_010001_011110L); // 
    }

    /** A glyph, containing the bitmap for a character. */
    public class Glyph {
        private final int width;
        private final long bitmap;

        Glyph(int width, long bitmap) {
            this.width = width;
            this.bitmap = bitmap;
        }

        /** Returns true if the pixel at the given coordinate in character space is set. */
        public boolean getPixel(int x, int y) {
            // This looks a bit wonky because the bits are written from high to low in the constants.
            int bitAddress = (cellHeight - y) * cellWidth - x - 1;
            return (bitmap & (1L << bitAddress)) != 0;
        }

        /** Returns the width of this character. Should match the cell width for monospaced fonts. */
        public int getWidth() {
            return width;
        }

        /** Returns the bitmap in a format suitable for Hd44780Driver.uploadCharacter() */
        public long getHd44780Bitmap() {
            if (cellWidth > 6 || cellHeight > 8) {
                throw new IllegalStateException("Hd44780 bitmap export is limited to 6x8 pixel cells (the first column must be empty)");
            }
            long result = 0;
            int bitMask = (1 << cellWidth) - 1;
            for (int i = 0; i < cellHeight; i++) {
                result |= ((bitmap & bitMask) >> (i * cellWidth)) << (i * 8);
                bitMask <<= cellWidth;
            }
            return result;
        }

        /**
         * Returns a new trimmed glyph with empty columns at the left and right border removed
         * and the width adjusted accordingly.
         */
        public Glyph toProportional() {
            if (bitmap == 0) {
                // Special case (NB)SP.
                return new Glyph(cellWidth * 2 / 3, 0);
            }

            int xMin = 0;
            int xMax = width - 1;

            long mask = columnMask << (cellWidth - 1);
            while (xMin < xMax && (bitmap & mask) == 0) {
                xMin++;
                mask >>>= 1;
            }
            mask = columnMask;
            while (xMin < xMax && (bitmap & mask) == 0) {
                xMax--;
                mask <<= 1;
            }

            if (xMin == 0 && xMax == width - 1) {
                return this;
            }
            return new Glyph(Math.min(cellWidth, xMax - xMin + 2), bitmap << Math.max(0, xMin-1));
        }
    }
}
